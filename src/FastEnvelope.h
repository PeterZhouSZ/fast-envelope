#pragma once
#include <fastenvelope/Types.hpp>
#include<vector>
#include<fastenvelope/Parameters.h>
namespace fastEnvelope {

	class FastEnvelope
	{
	public:

		static bool FastEnvelopeTest(const std::array<Vector3, 3> &triangle, const std::vector<std::array<Vector3, 12>>& envprism);

		static void SLIntersection(const Parameters &params, const std::array<Vector3, 3>& cutface, const Vector3& linepoints0, const Vector3& linepoints1,
			int & cutOrnot, Vector3& interp);
		// segment and facet intersection. the first 3 segments are triangle edges. interp is the list of intersection points GENERATED BY THIS CUT, 
		//interseg shows this interp is generated by which segment
		static void Segment_facet_intersection(std::vector<std::array<Vector3, 2>>& seglist, const std::array<Vector3, 3>& facet, std::vector<Vector3>& interp, std::vector<int>& interseg);
		
		// to check if a point is in the prisms. the jump index shows the prisms not counted in calculation, and jump is sorted from small to big
		static bool point_out_prism(const Vector3& point, const std::vector<std::array<Vector3, 12>>& envprism, const std::vector<int>& jump);

		static void BoxGeneration(const std::vector<Vector3>& m_ver, const std::vector<Vector3i>& m_faces, std::vector<std::array<Vector3, 12>>& envprism, const Scalar& bbd);

	
	};
}

